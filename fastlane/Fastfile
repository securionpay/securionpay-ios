default_platform(:ios)

platform :ios do
  before_all do
    ENV["SPACESHIP_SKIP_2FA_UPGRADE"] = "1"
  end

  desc "Description of what the lane does"
  lane :tests do
      prepare_keychain
      synchronize_signing(type: "development")
      clean_simulators
      clean_test_output

      test_run_block = lambda do |testrun_info|
        failed_test_count = testrun_info[:failed].size

        if failed_test_count > 0
          UI.important('The run of tests would finish with failures due to fragile tests here.')
          try_attempt = testrun_info[:try_count]
          if try_attempt < 3
            UI.header('Since we are using :multi_scan, we can re-run just those failing tests!')
          end
        end
      end

      scan(
        buildlog_path: "./fastlane/fastlane-buildlog",
        derived_data_path: "~/Library/Developer/Xcode/DerivedData",
        app_identifier: 'com.sigia',
        clean: true,
        reinstall_app: true,
        reset_simulator: true,
        force_quit_simulator: true,
        project:'securionpay-ios.xcodeproj',
        scheme: 'UnitTests',
        device: 'iPhone 12 mini (14.4)',
        concurrent_workers: 1,
        fail_build: false,
        max_concurrent_simulators: 1,
        prelaunch_simulator: true,
        include_simulator_logs: true,
        output_types: "junit",
        result_bundle: true,
        slack_url: "https://hooks.slack.com/services/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",
        slack_username: "fastlane ios",
        slack_message: "UI nightly tests (ios ui_tests) failed",
        slack_icon_url: "https://img.icons8.com/fluent/144/000000/mac-os.png",
        slack_only_on_failure: true
      )

      sh("mv test_output/report.junit test_output/report_unit.junit")
      clean_simulators
      
      scan(
        buildlog_path: "./fastlane/fastlane-buildlog",
        derived_data_path: "~/Library/Developer/Xcode/DerivedData",
        app_identifier: 'com.sigia',
        clean: true,
        reinstall_app: true,
        reset_simulator: true,
        force_quit_simulator: true,
        workspace:'Examples/Examples.xcworkspace',
        scheme: 'UITests',
        device: 'iPhone 12 mini (14.4)',
        concurrent_workers: 1,
        fail_build: false,
        max_concurrent_simulators: 1,
        prelaunch_simulator: true,
        include_simulator_logs: true,
        output_types: "junit",
        result_bundle: true,
        slack_url: "https://hooks.slack.com/services/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",
        slack_username: "fastlane ios",
        slack_message: "UI nightly tests (ios ui_tests) failed",
        slack_icon_url: "https://img.icons8.com/fluent/144/000000/mac-os.png",
        slack_only_on_failure: true
      )

      message = "UI nightly tests (ios ui_tests) finished ðŸ’ª"
      UI.success(message)
      send_slack_notification(
        message: message,
        success: true,
        payload: { }
      )

      zip(
    		path: "fastlane/test_output/UITests.xcresult",
    		output_path: "fastlane/test_output/report.xcresult.zip"
  	)

      cleanup_keychain
    end

error do |lane, exception, options|
  send_slack_notification(
    message: "Fastlane build (ios " + lane.to_s + ") failed ðŸ˜”. See description below.",
    success: false,
    payload: { "Error" => exception.to_s }
  )
  cleanup_keychain
end

private_lane :prepare_keychain do |options|
  begin
    delete_keychain(name: "match_keychain")
  rescue
  end
  create_keychain(
    name: "match_keychain",
    unlock: true,
    timeout: false,
    add_to_search_list: true,
    lock_when_sleeps: false,
    password: "12345678"
  )
  unlock_keychain(
    path: "match_keychain",
    password: "12345678"
  )
end

private_lane :cleanup_keychain do |options|
  begin
    delete_keychain(name: "match_keychain")
  rescue
  end
end

private_lane :synchronize_signing do |options|
  match(
    type: options[:type],
    force_for_new_devices: true,
    readonly: false,
    keychain_name: "match_keychain",
    keychain_password: "12345678"
  )
end

private_lane :send_slack_notification do |options|
  payload = {
    "Build URL" => ENV["BUILD_URL"]
  }

  unless ENV["AWS_DEVICE_FARM_WEB_URL_OF_RUN"].nil?
    payload["AWS Device Farm URL"] = ENV["AWS_DEVICE_FARM_WEB_URL_OF_RUN"]
  end

  slack(
      username: "fastlane ios",
      icon_url: "https://img.icons8.com/fluent/144/000000/mac-os.png",
      slack_url: "https://hooks.slack.com/services/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",
      message: options[:message],
      success: options[:success],
      default_payloads: [],
      payload: payload.update(options[:payload])
    )
end

private_lane :clean_simulators do |options|
  sh("xcrun simctl shutdown all")
  sh("xcrun simctl erase all")
  sh("defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0")
end

lane :clean_test_output do |options|
  sh("rm -rf test_output")
  sh("mkdir test_output")
end
end
