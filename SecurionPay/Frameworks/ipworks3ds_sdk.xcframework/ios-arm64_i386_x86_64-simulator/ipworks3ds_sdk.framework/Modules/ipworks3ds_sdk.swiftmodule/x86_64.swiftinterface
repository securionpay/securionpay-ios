// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ipworks3ds_sdk
import AdSupport
import CommonCrypto
import CoreLocation
import Darwin
import Foundation
import MachO
import Swift
import UIKit
import WebKit
@_exported import ipworks3ds_sdk
@_inheritsConvenienceInitializers @objc public class LoadDSCertsBundle : ObjectiveC.NSObject {
  @objc public static func contentsColor()
  @objc public static func getBackgroundColorShouldStop()
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class Transaction : ObjectiveC.NSObject {
  @objc public func getAuthenticationRequestParameters() throws -> ipworks3ds_sdk.AuthenticationRequestParameters
  @objc public func doChallenge(rootViewController: UIKit.UIViewController, challengeParameters: ipworks3ds_sdk.ChallengeParameters, challengeStatusReceiver: ipworks3ds_sdk.ChallengeStatusReceiver, timeout: Swift.Int) throws
  @objc public func getProgressView() throws -> ipworks3ds_sdk.ProgressView
  @objc public func close() throws
  @objc deinit
  @objc override dynamic public init()
}
extension UIColor {
  convenience public init?(hexColorValue: Swift.String)
  public func clientConfigAuthRequestParam() -> Swift.String
}
public enum ClientACSRootCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstAuto
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientDeviceParamValueTypes : Swift.Int32 {
  case vtObject
  case vtArray
  case vtString
  case vtNumber
  case vtBool
  case vtNull
  case vtRaw
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientDirectoryServerCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstAuto
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientProxyAuthSchemes : Swift.Int32 {
  case authBasic
  case authDigest
  case authProprietary
  case authNone
  case authNtlm
  case authNegotiate
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientProxySSLs : Swift.Int32 {
  case psAutomatic
  case psAlways
  case psNever
  case psTunnel
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientSSLCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstAuto
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public protocol IPWorks3DSClientDelegateSwift {
  func deviceParamIndexDyldInfoCmd(_ dataPacket: Foundation.Data)
  func stringWhyInformationText(_ dataPacket: Foundation.Data)
  func whitespacesAndNewlinesNameA(_ errorCode: Swift.Int32, _ description: Swift.String)
  func implementationSimulator(_ logLevel: Swift.Int32, _ message: Swift.String, _ logType: Swift.String)
  func lazyBindInfoCmdParamValue(_ certEncoded: Foundation.Data, _ certSubject: Swift.String, _ certIssuer: Swift.String, _ status: Swift.String, _ accept: inout Swift.Int32)
  func frameworkSelector(_ message: Swift.String)
}
public enum IPWorks3DSClientError : Swift.Error {
  case Error(Swift.Int32, Swift.String)
}
@objc @_inheritsConvenienceInitializers public class CompletionEventASIdentifierManager : ObjectiveC.NSObject, ipworks3ds_sdk.ThreadValue {
  public var ptraceReceiptLastPathComponent: ipworks3ds_sdk.LinkedCmdNameDEBUGGING
  @objc override dynamic public init()
  @objc deinit
  public var cornerRadiusDirectoryServerCertStoreType: Swift.String {
    get
  }
  public var identifierSyscall: Swift.Int32 {
    get
  }
  public var delegate: ipworks3ds_sdk.IPWorks3DSClientDelegateSwift? {
    get
    set
  }
  @objc public func deviceParamIndexDyldInfoCmd(_ dataPacket: Foundation.Data!)
  @objc public func stringWhyInformationText(_ dataPacket: Foundation.Data!)
  @objc public func whitespacesAndNewlinesNameA(_ errorCode: Swift.Int32, _ description: Swift.String!)
  @objc public func implementationSimulator(_ logLevel: Swift.Int32, _ message: Swift.String!, _ logType: Swift.String!)
  @objc public func lazyBindInfoCmdParamValue(_ certEncoded: Foundation.Data!, _ certSubject: Swift.String!, _ certIssuer: Swift.String!, _ status: Swift.String!, _ accept: Swift.UnsafeMutablePointer<Swift.Int32>)
  @objc public func frameworkSelector(_ message: Swift.String!)
  public var cleanupDirectoryServerInformationTest: Swift.String {
    get
    set
  }
  public var ACSHTMLPcBase: Swift.String {
    get
  }
  public var ContinueAfterFailureWarning: Swift.String {
    get
  }
  public var AppBundleIDNamelen: Swift.String {
    get
  }
  public var IsActiveIsFishhooked: Swift.Int32 {
    get
    set
  }
  public func EMULATORDefaultValue(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func pathWithSomeRandomGetUIImage(aCSRootCertIndex: Swift.Int32, newACSRootCertEncoded: Swift.String) throws
  public func MaxTimeIntervalUrlSchemes(aCSRootCertIndex: Swift.Int32) throws -> Foundation.Data
  public func whyInformationLabelGetAuthenticationRequestParameters(aCSRootCertIndex: Swift.Int32, newACSRootCertEncoded: Foundation.Data) throws
  public func DefaultCurrentSdkVersion(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func textBoxCustomizationRandoms(aCSRootCertIndex: Swift.Int32, newACSRootCertStore: Swift.String) throws
  public func BreakRestSymbolByFishHook(aCSRootCertIndex: Swift.Int32) throws -> Foundation.Data
  public func getppidTypeDenyDebuggerByLoader(aCSRootCertIndex: Swift.Int32, newACSRootCertStore: Foundation.Data) throws
  public func RemoveAllFileExists(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func isHiddenGetSDKAppID(aCSRootCertIndex: Swift.Int32, newACSRootCertStorePassword: Swift.String) throws
  public func GetErrorMessageSymbolName(aCSRootCertIndex: Swift.Int32) throws -> ipworks3ds_sdk.ClientACSRootCertStoreTypes
  public func timedoutSetBrandingZoneLogoGap(aCSRootCertIndex: Swift.Int32, newACSRootCertStoreType: ipworks3ds_sdk.ClientACSRootCertStoreTypes) throws
  public func SuspiciousLibrariesSUBMIT(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func ifaddrsClientDirectoryServerCertStoreTypes(aCSRootCertIndex: Swift.Int32, newACSRootCertSubject: Swift.String) throws
  public var LoadDylibIndexDenyDebuggerByLoader: Swift.String {
    get
  }
  public var localeEMULATOR: Swift.String {
    get
  }
  public var certEndTagHeadingTextFontSize: Swift.String {
    get
    set
  }
  public var getAcsRefNumberEqualTo: Swift.Bool {
    get
  }
  public var machONewACSRootCertStoreType: Swift.String {
    get
    set
  }
  public var urlSchemeAdSupport: Swift.String {
    get
  }
  public var setBrandingZoneLogoGapAssumingMemoryBound: Swift.String {
    get
  }
  public var resetSymbolRandoms: Swift.String {
    get
  }
  public var isInstalledFromTrustedStoresDispatchQueue: Swift.String {
    get
  }
  public var isEqualRandomElement: Swift.Int32 {
    get
  }
  public func modelSdkDyldIndex(challengeSelectInfoIndex: Swift.Int32) throws -> Swift.String
  public func removeItemLenght(challengeSelectInfoIndex: Swift.Int32) throws -> Swift.String
  public var acsTransactionIDUIFont: Swift.String {
    get
  }
  public var loaderClientConfig: Swift.Int32 {
    get
    set
  }
  public func setDeviceParamValueTypeContents(deviceParamIndex: Swift.Int32) throws -> Swift.Int32
  public func encryptAndDecryptSingleStringIsStaticMethod(deviceParamIndex: Swift.Int32, newDeviceParamCategory: Swift.Int32) throws
  public func thridInstructionPtrAcsOperatorID(deviceParamIndex: Swift.Int32) throws -> Swift.String
  public func dladdrTypeInput(deviceParamIndex: Swift.Int32, newDeviceParamFieldName: Swift.String) throws
  public func getDefaultDSPublicKeyMachO(deviceParamIndex: Swift.Int32) throws -> Swift.String
  public func paymentSystemImageMediumIsBeingDebugged(deviceParamIndex: Swift.Int32, newDeviceParamValue: Swift.String) throws
  public func setToolbarCustomizationShowView(deviceParamIndex: Swift.Int32) throws -> ipworks3ds_sdk.ClientDeviceParamValueTypes
  public func infoDictionaryPaymentSystemImageMedium(deviceParamIndex: Swift.Int32, newDeviceParamValueType: ipworks3ds_sdk.ClientDeviceParamValueTypes) throws
  public var joinedSetPadding: Swift.String {
    get
    set
  }
  public var getGroupIsProgressDialogMinimumDisplaySecondsEnabled: Foundation.Data {
    get
    set
  }
  public var equalToNewDeviceParamCategory: Swift.String {
    get
    set
  }
  public var setButtonCustomizationStringObfuscationTest: Foundation.Data {
    get
    set
  }
  public var setTextColorBlack: Swift.String {
    get
    set
  }
  public var clearClientComponentGetHexEncodedString: ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes {
    get
    set
  }
  public var atPathSectionVmAddr: Swift.String {
    get
    set
  }
  public var forResourceNatural: Swift.String {
    get
    set
  }
  public var frameworkTEXTSectionAddrEndCoordinate: Swift.String {
    get
  }
  public var transactionDenyFishHookByResetSymbol: Swift.String {
    get
  }
  public var markDebuggingOldMethod: Swift.String {
    get
  }
  public var inputArraryPrintSectionInfo: Swift.Int32 {
    get
    set
  }
  public func randomElementSetButtonCustomization(extensionIndex: Swift.Int32) throws -> Swift.Bool
  public func randomElementAlarm(extensionIndex: Swift.Int32, newExtensionCritical: Swift.Bool) throws
  public func ifaddrsShouldStop(extensionIndex: Swift.Int32) throws -> Swift.String
  public func resendInformationLabelAuthorizedWhenInUse(extensionIndex: Swift.Int32, newExtensionData: Swift.String) throws
  public func reserveCapacityClientDeviceParamValueTypes(extensionIndex: Swift.Int32) throws -> Swift.String
  public func standardConnect(extensionIndex: Swift.Int32, newExtensionId: Swift.String) throws
  public func challengeStatusReceiverACSRootCertIndex(extensionIndex: Swift.Int32) throws -> Swift.String
  public func hostnameGetErrorDetails(extensionIndex: Swift.Int32, newExtensionName: Swift.String) throws
  public var paymentSystemImageExtraHighThrow: Swift.String {
    get
  }
  public var oSLittleEndianReceiptURL: Swift.String {
    get
  }
  public var reserveCapacityUnsafeBitCast: Swift.String {
    get
  }
  public var BundleIdentifierCertEndTag: Swift.Bool {
    get
    set
  }
  public var SysctlProvisionPath: Swift.String {
    get
  }
  public var getHeadingTextFontSizeLinkedCmdName: Swift.String {
    get
  }
  public var getClientInfoDict: Swift.String {
    get
  }
  public var addRnTheConfigParameter: Swift.String {
    get
  }
  public var greaterThanOrEqualToDarkGray: ipworks3ds_sdk.ClientProxyAuthSchemes {
    get
    set
  }
  public var removeAllHeadingTextFontName: Swift.Bool {
    get
    set
  }
  public var systemGetMessage: Swift.String {
    get
    set
  }
  public var pkgInfoModifiedDateTypes: Swift.Int32 {
    get
    set
  }
  public var cydiaUrlSchemeLoadedDylibCmd: Swift.String {
    get
    set
  }
  public var sectionVmAddrIsArray: ipworks3ds_sdk.ClientProxySSLs {
    get
    set
  }
  public var locManagerLoader: Swift.String {
    get
    set
  }
  public var getifaddrsLoader: Swift.String {
    get
  }
  public var IsJailbrokenAnyClass: Swift.String {
    get
    set
  }
  public var ChallengeSelectInfoCountSocket: Swift.String {
    get
    set
  }
  public var BreakSetAcsRefNumber: Swift.String {
    get
    set
  }
  public var ObjectSetMessage: Foundation.Data {
    get
    set
  }
  public var DsIconViewForkRetCode: Swift.String {
    get
    set
  }
  public var DelegateForFamilyName: Foundation.Data {
    get
    set
  }
  public var FileoffPointee: Swift.String {
    get
    set
  }
  public var EndifIsFishhooked: Foundation.Data {
    get
    set
  }
  public var ShiftSetAcsRefNumber: Swift.String {
    get
    set
  }
  public var ViewWithTagAddrFamily: ipworks3ds_sdk.ClientSSLCertStoreTypes {
    get
    set
  }
  public var ErrorDescriptionUrlSchemes: Swift.String {
    get
    set
  }
  public var ImageSlideWithMemoryRebound: Swift.String {
    get
  }
  public var ConstraintSystemName: Foundation.Data {
    get
  }
  public var heightCertEncoded: Swift.String {
    get
  }
  public var uIScreenVERSION: Swift.Int32 {
    get
    set
  }
  public var boundsGroup: Swift.String {
    get
  }
  public var uIApplicationChallengeSelectInfoIndex: Swift.Bool {
    get
    set
  }
  public var pageOffsetDefer: Swift.String {
    get
    set
  }
  public var originCurrentSdkVersion: Swift.String {
    get
  }
  public var textBoxCustomizationAccept: Swift.String {
    get
  }
  public func conventionPosition(_ field: Swift.String, _ value: Swift.String, _ valueType: Swift.Int32, _ category: Swift.Int32) throws
  public func staticRandoms(_ id: Swift.String, _ name: Swift.String, _ critical: Swift.Bool, _ data: Swift.String) throws
  public func buttonCustomizationShowView(_ name: Swift.String, _ value: Swift.String, _ valueType: Swift.Int32) throws
  public func oSLittleEndianContentsOf(_ authResponse: Swift.String) throws
  public func catchDefault(_ configurationString: Swift.String) throws -> Swift.String
  public func challengeSelectInfoNameConvention() throws -> Swift.String
  public func newACSRootCertStoreConfigStr() throws
  public func isAdvertisingTrackingEnabledChallengeDataEntry() throws
  public func messageTypeUIApplication() throws
  public func setMinimumDisplaySecondsHeaderText() throws
}
@objc public enum ButtonType : Swift.Int {
  case SUBMIT
  case CONTINUE
  case NEXT
  case CANCEL
  case RESEND
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LabelType : Swift.Int {
  case INFO_HEADER
  case INFO_TEXT
  case INFO_LABEL
  case WHITELIST
  case WHY_INFO
  case WHY_INFO_TEXT
  case EXPANDABLE_INFO
  case EXPANDABLE_INFO_TEXT
  case SELECTION_LIST
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Severity : Swift.Int {
  case LOW
  case MEDIUM
  case HIGH
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SecurityEvent : Swift.Int {
  case ROOT
  case TAMPERED
  case INSTALLED_FROM_UNTRUSTED_STORE
  case HOOK
  case EMULATOR
  case DEBUGGING
  case DEBUG_ENABLED
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ChallengeStatusReceiver {
  @objc func completed(_ completionEvent: ipworks3ds_sdk.CompletionEvent)
  @objc func cancelled()
  @objc func timedout()
  @objc func protocolError(_ protocolErrorEvent: ipworks3ds_sdk.ProtocolErrorEvent)
  @objc func runtimeError(_ runtimeErrorEvent: ipworks3ds_sdk.RuntimeErrorEvent)
}
@objc public protocol ClientEventListener {
  @objc func onDataPacketIn(_ dataPacket: Foundation.Data)
  @objc func onDataPacketOut(_ dataPacket: Foundation.Data)
  @objc func onError(_ errorCode: Swift.Int32, _ description: Swift.String)
  @objc func onLog(_ logLevel: Swift.Int32, _ message: Swift.String, _ logType: Swift.String)
  @objc func onSSLServerAuthentication(_ certEncoded: Foundation.Data, _ certSubject: Swift.String, _ certIssuer: Swift.String, _ status: Swift.String, _ accept: Swift.UnsafeMutablePointer<Swift.Int32>)
  @objc func onSSLStatus(_ message: Swift.String)
}
@objc public protocol SecurityEventListener {
  @objc func alarm(_ severity: ipworks3ds_sdk.Severity, _ event: ipworks3ds_sdk.SecurityEvent)
}
@_inheritsConvenienceInitializers @objc public class ProgressView : ObjectiveC.NSObject {
  @objc public func show()
  @objc public func close()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AuthenticationRequestParameters : ObjectiveC.NSObject {
  @objc public func getDeviceData() -> Swift.String
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getSDKAppID() -> Swift.String
  @objc public func getSDKReferenceNumber() -> Swift.String
  @objc public func getSDKEphemeralPublicKey() -> Swift.String
  @objc public func getMessageVersion() -> Swift.String
  @objc public func getAuthRequest() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ChallengeParameters : ObjectiveC.NSObject {
  @objc public init(threeDSServerAuthResponse: Swift.String)
  @objc public init(threeDSServerTransactionID: Swift.String, acsTransactionID: Swift.String, acsRefNumber: Swift.String, acsSignedContent: Swift.String, threeDSRequestorAppURL: Swift.String)
  @objc public func set3DSServerTransactionID(_ transactionID: Swift.String)
  @objc public func setAcsTransactionID(_ transactionID: Swift.String)
  @objc public func setAcsRefNumber(_ refNumber: Swift.String)
  @objc public func setAcsSignedContent(_ signedContent: Swift.String)
  @objc public func get3DSServerTransactionID() -> Swift.String
  @objc public func getAcsTransactionID() -> Swift.String
  @objc public func getAcsRefNumber() -> Swift.String
  @objc public func getAcsSignedContent() -> Swift.String
  @objc public func getThreeDSRequestorAppURL() -> Swift.String
  @objc public func setThreeDSRequestorAppURL(_ threeDSRequestorAppURL: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class ConfigParameters : ObjectiveC.NSObject {
  @objc public func addParam(group: Swift.String?, paramName: Swift.String, paramValue: Swift.String?) throws
  @objc public func getParamValue(group: Swift.String?, paramName: Swift.String) throws -> Swift.String
  @objc public func removeParam(group: Swift.String?, paramName: Swift.String) throws -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc public class DirectoryServerInfo : ObjectiveC.NSObject {
  @objc public init(RID: Swift.String, publicKey: Swift.String, CA: Swift.String)
  @objc public init(RID: Swift.String, publicKey: Swift.String, CAs: [Swift.String])
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ConfigParametersBuilder : ObjectiveC.NSObject {
  public static let GROUP_DIRECTORY_SERVER_KEY: Swift.String
  public static let GROUP_DIRECTORY_SERVER_CA: Swift.String
  public static let GROUP_DEVICE_PARAMETER_BLACK_LIST: Swift.String
  public static let GROUP_CLIENT_CONFIG: Swift.String
  public static let RUNTIME_LICENSE: Swift.String
  public static let APP_PROVISIONING_PROFILE_HASH: Swift.String
  public static let APP_EXECUTABLE_HASH: Swift.String
  public static let APP_BUNDLE_ID: Swift.String
  @objc public init(directoryServerInfoList: [ipworks3ds_sdk.DirectoryServerInfo]?, runtimeLicense: Swift.String, deviceParameterBlacklist: [Swift.String]?, clientConfig: [Swift.String]?, appBundleID: Swift.String)
  @objc public func build() throws -> ipworks3ds_sdk.ConfigParameters
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Customization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setTextFontName(fontName: Swift.String?) throws
  @objc public func setTextColor(hexColorCode: Swift.String?) throws
  @objc public func setTextColor(color: UIKit.UIColor?)
  @objc public func setTextFontSize(fontSize: Swift.Int) throws
  @objc public func getTextFontName() -> Swift.String?
  @objc public func getTextColor() -> UIKit.UIColor?
  @objc public func getTextColorHex() -> Swift.String?
  @objc public func getTextFontSize() -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ButtonCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setBackgroundColor(color: UIKit.UIColor?)
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func setHeight(height: CoreGraphics.CGFloat) throws
  @objc public func getBackgroundColor() -> UIKit.UIColor?
  @objc public func getCornerRadius() -> Swift.Int
  @objc public func getHeight() -> CoreGraphics.CGFloat
  @objc public func setPadding(edge: UIKit.UIEdgeInsets)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ToolbarCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setBackgroundColor(color: UIKit.UIColor?)
  @objc public func setHeaderText(headerText: Swift.String?) throws
  @objc public func setButtonText(buttonText: Swift.String?) throws
  @objc public func getBackgroundColor() -> UIKit.UIColor?
  @objc public func getHeaderText() -> Swift.String?
  @objc public func getButtonText() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class LabelCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setHeadingTextColor(color: UIKit.UIColor?)
  @objc public func setHeadingTextFontName(fontName: Swift.String?) throws
  @objc public func setHeadingTextFontSize(fontSize: Swift.Int) throws
  @objc public func setHeadingTextAlignment(textAlignment: UIKit.NSTextAlignment) throws
  @objc public func setPadding(forLabelType: ipworks3ds_sdk.LabelType, edge: UIKit.UIEdgeInsets) throws
  @objc public func setBackgroundColor(forLabelType: ipworks3ds_sdk.LabelType, color: UIKit.UIColor) throws
  @objc public func setTextColor(forLabelType: ipworks3ds_sdk.LabelType, color: UIKit.UIColor) throws
  @objc public func setTextFontName(forLabelType: ipworks3ds_sdk.LabelType, fontName: Swift.String) throws
  @objc public func setTextFontSize(forLabelType: ipworks3ds_sdk.LabelType, fontSize: CoreGraphics.CGFloat) throws
  @objc public func getHeadingTextColor() -> UIKit.UIColor?
  @objc public func getHeadingTextFontName() -> Swift.String?
  @objc public func getHeadingTextFontSize() -> Swift.Int
  @objc public func getHeadingTextAlignment() -> UIKit.NSTextAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TextBoxCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func getCornerRadius() -> Swift.Int
  @objc public func setBorderWidth(borderWidth: Swift.Int) throws
  @objc public func setBorderColor(color: UIKit.UIColor?)
  @objc public func getBorderWidth() -> Swift.Int
  @objc public func getBorderColor() -> UIKit.UIColor?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class UiCustomization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setButtonCustomization(buttonCustomization: ipworks3ds_sdk.ButtonCustomization, buttonType: ipworks3ds_sdk.ButtonType) throws
  @objc public func setToolbarCustomization(toolbarCustomization: ipworks3ds_sdk.ToolbarCustomization) throws
  @objc public func setLabelCustomization(labelCustomization: ipworks3ds_sdk.LabelCustomization) throws
  @objc public func setTextBoxCustomization(textBoxCustomization: ipworks3ds_sdk.TextBoxCustomization) throws
  @objc public func getButtonCustomization(buttonType: ipworks3ds_sdk.ButtonType) -> ipworks3ds_sdk.ButtonCustomization
  @objc public func getToolbarCustomization() -> ipworks3ds_sdk.ToolbarCustomization
  @objc public func getLabelCustomization() -> ipworks3ds_sdk.LabelCustomization
  @objc public func getTextBoxCustomization() -> ipworks3ds_sdk.TextBoxCustomization
  @objc public func setBackground(color: UIKit.UIColor?)
  @objc public func setInformationZoneIconPosition(_ position: Swift.Int)
  @objc public func setBrandingZoneLogoGap(_ value: CoreGraphics.CGFloat)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Warning : ObjectiveC.NSObject {
  @objc public func getID() -> Swift.String
  @objc public func getMessage() -> Swift.String
  @objc public func getSeverity() -> ipworks3ds_sdk.Severity
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RuntimeErrorEvent : ObjectiveC.NSObject {
  @objc public func getErrorCode() -> Swift.String?
  @objc public func getErrorMessage() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ErrorMessage : ObjectiveC.NSObject {
  @objc public func getTransactionID() -> Swift.String
  @objc public func getErrorCode() -> Swift.String
  @objc public func getErrorDescription() -> Swift.String
  @objc public func getErrorDetails() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ProtocolErrorEvent : ObjectiveC.NSObject {
  @objc public func getErrorMessage() -> ipworks3ds_sdk.ErrorMessage
  @objc public func getSDKTransactionID() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CompletionEvent : ObjectiveC.NSObject {
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getTransactionStatus() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public enum IPWorks3DSSDKError : Swift.Error {
  case SDKAlreadInitializedException
  case SDKNotInitializedException(_: Swift.String)
  case SDKRuntimeException(_: Swift.String)
  case InvalidInputException(_: Swift.String)
}
extension IPWorks3DSSDKError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var dlopenHasEmbeddedProvisioningProfile: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ThreeDS2Service : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(bundle: Foundation.Bundle)
  @objc public func initialize(configParameters: ipworks3ds_sdk.ConfigParameters?, locale: Swift.String?, uiCustomization: ipworks3ds_sdk.UiCustomization?, clientEventListener: ipworks3ds_sdk.ClientEventListener?, securityEventListener: ipworks3ds_sdk.SecurityEventListener?) throws
  @objc public func createTransaction(_ directoryServerID: Swift.String, _ messageVersion: Swift.String?) throws -> ipworks3ds_sdk.Transaction
  @objc public func cleanup() throws
  @objc public func getSDKVersion() throws -> Swift.String
  @objc public func getWarnings() throws -> Swift.Array<ipworks3ds_sdk.Warning>
  @objc deinit
}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.Equatable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.Hashable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ButtonType : Swift.Equatable {}
extension ipworks3ds_sdk.ButtonType : Swift.Hashable {}
extension ipworks3ds_sdk.ButtonType : Swift.RawRepresentable {}
extension ipworks3ds_sdk.LabelType : Swift.Equatable {}
extension ipworks3ds_sdk.LabelType : Swift.Hashable {}
extension ipworks3ds_sdk.LabelType : Swift.RawRepresentable {}
extension ipworks3ds_sdk.Severity : Swift.Equatable {}
extension ipworks3ds_sdk.Severity : Swift.Hashable {}
extension ipworks3ds_sdk.Severity : Swift.RawRepresentable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.Equatable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.Hashable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.RawRepresentable {}
