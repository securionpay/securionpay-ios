// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ipworks3ds_sdk
import AdSupport
import CommonCrypto
import CoreLocation
import Darwin
import Foundation
import MachO
import Swift
import UIKit
import WebKit
@_exported import ipworks3ds_sdk
@_inheritsConvenienceInitializers @objc public class ExpandableInformationTextCreateProgressDialogForAReq : ObjectiveC.NSObject {
  @objc public static func sdkAppIdKeyDenyDebugger()
  @objc public static func setupClientComponentUIImageView()
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class Transaction : ObjectiveC.NSObject {
  @objc public func getAuthenticationRequestParameters() throws -> ipworks3ds_sdk.AuthenticationRequestParameters
  @objc public func doChallenge(rootViewController: UIKit.UIViewController, challengeParameters: ipworks3ds_sdk.ChallengeParameters, challengeStatusReceiver: ipworks3ds_sdk.ChallengeStatusReceiver, timeout: Swift.Int) throws
  @objc public func getProgressView() throws -> ipworks3ds_sdk.ProgressView
  @objc public func close() throws
  @objc deinit
  @objc override dynamic public init()
}
extension UIColor {
  convenience public init?(hexColorValue: Swift.String)
  public func sequenceChallengeSelectInfoCount() -> Swift.String
}
public enum ClientACSRootCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstAuto
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientDeviceParamValueTypes : Swift.Int32 {
  case vtObject
  case vtArray
  case vtString
  case vtNumber
  case vtBool
  case vtNull
  case vtRaw
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientDirectoryServerCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstAuto
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientProxyAuthSchemes : Swift.Int32 {
  case authBasic
  case authDigest
  case authProprietary
  case authNone
  case authNtlm
  case authNegotiate
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientProxySSLs : Swift.Int32 {
  case psAutomatic
  case psAlways
  case psNever
  case psTunnel
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientSSLCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstAuto
  public typealias RawValue = Swift.Int32
  public init?(rawValue: Swift.Int32)
  public var rawValue: Swift.Int32 {
    get
  }
}
public protocol IPWorks3DSClientDelegateSwift {
  func cmdsizeContains(_ dataPacket: Foundation.Data)
  func internalCompletionEvent(_ dataPacket: Foundation.Data)
  func onViewVersion(_ errorCode: Swift.Int32, _ description: Swift.String)
  func getMessageVersionDeviceParamsCollector(_ logLevel: Swift.Int32, _ message: Swift.String, _ logType: Swift.String)
  func writeMarkHooked(_ certEncoded: Foundation.Data, _ certSubject: Swift.String, _ certIssuer: Swift.String, _ status: Swift.String, _ accept: inout Swift.Int32)
  func lenghtCertArray(_ message: Swift.String)
}
public enum IPWorks3DSClientError : Swift.Error {
  case Error(Swift.Int32, Swift.String)
}
@objc @_inheritsConvenienceInitializers public class ImmhiMaskBlurEffect : ObjectiveC.NSObject, ipworks3ds_sdk.ForegroundColorParamValues {
  public var constantLazyBindInfoCmd: ipworks3ds_sdk.MaxHeightUIActivityIndicatorView
  @objc override dynamic public init()
  @objc deinit
  public var hasSuspiciousJailbreakFilesUIApplication: Swift.String {
    get
  }
  public var setTextColorWithUnsafeBytes: Swift.Int32 {
    get
  }
  public var delegate: ipworks3ds_sdk.IPWorks3DSClientDelegateSwift? {
    get
    set
  }
  @objc public func cmdsizeContains(_ dataPacket: Foundation.Data!)
  @objc public func internalCompletionEvent(_ dataPacket: Foundation.Data!)
  @objc public func onViewVersion(_ errorCode: Swift.Int32, _ description: Swift.String!)
  @objc public func getMessageVersionDeviceParamsCollector(_ logLevel: Swift.Int32, _ message: Swift.String!, _ logType: Swift.String!)
  @objc public func writeMarkHooked(_ certEncoded: Foundation.Data!, _ certSubject: Swift.String!, _ certIssuer: Swift.String!, _ status: Swift.String!, _ accept: Swift.UnsafeMutablePointer<Swift.Int32>)
  @objc public func lenghtCertArray(_ message: Swift.String!)
  public var layerPaymentSystemImageExtraHigh: Swift.String {
    get
    set
  }
  public var StubHelperSectionCheckSvcIntegrity: Swift.String {
    get
  }
  public var AvailableLocaleIdentifiersMinimumScaleFactor: Swift.String {
    get
  }
  public var TruncatingIfNeededEnter: Swift.String {
    get
  }
  public var TransStatusDecryptedString: Swift.Int32 {
    get
    set
  }
  public func GetMethodDyldPathWarning(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func uRLSessionEscaping(aCSRootCertIndex: Swift.Int32, newACSRootCertEncoded: Swift.String) throws
  public func NSLocaleDyldWhiteList(aCSRootCertIndex: Swift.Int32) throws -> Foundation.Data
  public func frameworkSectionPointer(aCSRootCertIndex: Swift.Int32, newACSRootCertEncoded: Foundation.Data) throws
  public func SetHeadingTextAlignmentASIdentifierManager(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func isInDeviceParamBlacklistArray(aCSRootCertIndex: Swift.Int32, newACSRootCertStore: Swift.String) throws
  public func IsInstalledFromTrustedStoresIconPadding(aCSRootCertIndex: Swift.Int32) throws -> Foundation.Data
  public func nameAIndirectSymbol(aCSRootCertIndex: Swift.Int32, newACSRootCertStore: Foundation.Data) throws
  public func HasSuffixCornerRadius(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func fontNameRebindLazySymbolWithFishHook(aCSRootCertIndex: Swift.Int32, newACSRootCertStorePassword: Swift.String) throws
  public func HasEmbeddedProvisioningProfileCurSectName(aCSRootCertIndex: Swift.Int32) throws -> ipworks3ds_sdk.ClientACSRootCertStoreTypes
  public func rightSetHeight(aCSRootCertIndex: Swift.Int32, newACSRootCertStoreType: ipworks3ds_sdk.ClientACSRootCertStoreTypes) throws
  public func TopAnchorSetACSRootCertStore(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func linkeditCmdLocManager(aCSRootCertIndex: Swift.Int32, newACSRootCertSubject: Swift.String) throws
  public var AttributesOfItemIssuerImageExtraHigh: Swift.String {
    get
  }
  public var timedoutUIKit: Swift.String {
    get
  }
  public var errorDescriptionSDKRuntimeException: Swift.String {
    get
    set
  }
  public var configParametersParserContentMode: Swift.Bool {
    get
  }
  public var transStatusGetSeverity: Swift.String {
    get
    set
  }
  public var warningsChallengeComplete: Swift.String {
    get
  }
  public var whiteLargeAtPath: Swift.String {
    get
  }
  public var onSSLServerAuthenticationAbsoluteString: Swift.String {
    get
  }
  public var getClientSysctlRet: Swift.String {
    get
  }
  public var convenienceHasSuffix: Swift.Int32 {
    get
  }
  public func flexibleWidthOnSSLServerAuthentication(challengeSelectInfoIndex: Swift.Int32) throws -> Swift.String
  public func cachedImageGetSDKReferenceNumber(challengeSelectInfoIndex: Swift.Int32) throws -> Swift.String
  public var alarmSetHeadingTextColor: Swift.String {
    get
  }
  public var addSecurityParamsUIEdgeInsets: Swift.Int32 {
    get
    set
  }
  public func currentTimeMillisLimitedToNumberOfLines(deviceParamIndex: Swift.Int32) throws -> Swift.Int32
  public func withUnsafePointerDarwin(deviceParamIndex: Swift.Int32, newDeviceParamCategory: Swift.Int32) throws
  public func finalWidth(deviceParamIndex: Swift.Int32) throws -> Swift.String
  public func logTypeConfiguration(deviceParamIndex: Swift.Int32, newDeviceParamFieldName: Swift.String) throws
  public func ncmdsDataCmd(deviceParamIndex: Swift.Int32) throws -> Swift.String
  public func setSeverityIndirectsymoff(deviceParamIndex: Swift.Int32, newDeviceParamValue: Swift.String) throws
  public func transStatusPaymentSystemImageExtraHigh(deviceParamIndex: Swift.Int32) throws -> ipworks3ds_sdk.ClientDeviceParamValueTypes
  public func inlineSegData(deviceParamIndex: Swift.Int32, newDeviceParamValueType: ipworks3ds_sdk.ClientDeviceParamValueTypes) throws
  public var isMethodInOurSDKWrite: Swift.String {
    get
    set
  }
  public var ensurePresentIsActive: Foundation.Data {
    get
    set
  }
  public var uRLSessionConfigurationDsIconResourceName: Swift.String {
    get
    set
  }
  public var uIControlUrlString: Foundation.Data {
    get
    set
  }
  public var checkTamperedByMobileProvisionHashCstAuto: Swift.String {
    get
    set
  }
  public var paymentSystemImageStringLocManager: ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes {
    get
    set
  }
  public var fontNameGetWarnings: Swift.String {
    get
    set
  }
  public var checkTamperedByBundleIdTextCmd: Swift.String {
    get
    set
  }
  public var falseErrorDescription: Swift.String {
    get
  }
  public var instructionNewACSRootCertStore: Swift.String {
    get
  }
  public var segmentLoadFunctionPointer: Swift.String {
    get
  }
  public var setAcsSignedContentUIBlurEffect: Swift.Int32 {
    get
    set
  }
  public func usingExecute(extensionIndex: Swift.Int32) throws -> Swift.Bool
  public func suspiciousLibrariesTitleEdgeInsets(extensionIndex: Swift.Int32, newExtensionCritical: Swift.Bool) throws
  public func forTimeIntervalSimulator(extensionIndex: Swift.Int32) throws -> Swift.String
  public func colorTAMPERED(extensionIndex: Swift.Int32, newExtensionData: Swift.String) throws
  public func minimumScaleFactorProgressView(extensionIndex: Swift.Int32) throws -> Swift.String
  public func strlenSDKWarnings(extensionIndex: Swift.Int32, newExtensionId: Swift.String) throws
  public func curSectNameIsClassInOurSDK(extensionIndex: Swift.Int32) throws -> Swift.String
  public func forFamilyNameComparable(extensionIndex: Swift.Int32, newExtensionName: Swift.String) throws
  public var preferredStyleNewDeviceParamFieldName: Swift.String {
    get
  }
  public var ensureBackgroundColorMapNotNilArray: Swift.String {
    get
  }
  public var deferDylib: Swift.String {
    get
  }
  public var InoutLoadedLibrary: Swift.Bool {
    get
    set
  }
  public var SdkAppIDProtectionSpace: Swift.String {
    get
  }
  public var getTopViewControllerIndirectsymoff: Swift.String {
    get
  }
  public var truncatingIfNeededGetDefaultDSCAs: Swift.String {
    get
  }
  public var localeURLRequest: Swift.String {
    get
  }
  public var linkedCmdCurrentTimeMillis: ipworks3ds_sdk.ClientProxyAuthSchemes {
    get
    set
  }
  public var viewIdxUrlSession: Swift.Bool {
    get
    set
  }
  public var errorCodeFreeifaddrs: Swift.String {
    get
    set
  }
  public var deviceParamCountSlice: Swift.Int32 {
    get
    set
  }
  public var getDirectoryServerCALinkeditCmdName: Swift.String {
    get
    set
  }
  public var syscallTypeCmdsize: ipworks3ds_sdk.ClientProxySSLs {
    get
    set
  }
  public var addRnChallengeComplete: Swift.String {
    get
    set
  }
  public var functionPtrBtFontSize: Swift.String {
    get
  }
  public var SdkTEXTSectionAddrEndLogVerbose: Swift.String {
    get
    set
  }
  public var TextBoxCustomizationLayer: Swift.String {
    get
    set
  }
  public var MyUILabelFileManager: Swift.String {
    get
    set
  }
  public var CheckAuthResponseUIDevice: Foundation.Data {
    get
    set
  }
  public var OnLogHandle: Swift.String {
    get
    set
  }
  public var PublicKeyNumberOfComponents: Foundation.Data {
    get
    set
  }
  public var ComparableStoredSdkAppId: Swift.String {
    get
    set
  }
  public var BaseAddressForResource: Foundation.Data {
    get
    set
  }
  public var FinalIsEqual: Swift.String {
    get
    set
  }
  public var SetButtonTextSdkVersionKey: ipworks3ds_sdk.ClientSSLCertStoreTypes {
    get
    set
  }
  public var ServerAddressGetErrorCode: Swift.String {
    get
    set
  }
  public var MarkRootGetButtonCustomization: Swift.String {
    get
  }
  public var RuntimeErrorContains: Foundation.Data {
    get
  }
  public var setObjectSetUp: Swift.String {
    get
  }
  public var myHTTPSImmlo: Swift.Int32 {
    get
    set
  }
  public var classTitleTextAttr: Swift.String {
    get
  }
  public var wHITELISTCollectDeviceDataParams: Swift.Bool {
    get
    set
  }
  public var dataTaskPointSize: Swift.String {
    get
    set
  }
  public var closeWrite: Swift.String {
    get
  }
  public var setACSRootCertStoreTypeRightBarButtonItem: Swift.String {
    get
  }
  public func inputResponseData(_ field: Swift.String, _ value: Swift.String, _ valueType: Swift.Int32, _ category: Swift.Int32) throws
  public func challengeDataEntrySymoff(_ id: Swift.String, _ name: Swift.String, _ critical: Swift.Bool, _ data: Swift.String) throws
  public func strlenFamilyNames(_ name: Swift.String, _ value: Swift.String, _ valueType: Swift.Int32) throws
  public func groupTypealias(_ authResponse: Swift.String) throws
  public func hasEmbeddedProvisioningProfileExpandableInformationText(_ configurationString: Swift.String) throws -> Swift.String
  public func heightDispatchQoS() throws -> Swift.String
  public func popViewControllerCurSegCmd() throws
  public func bringSubviewToFrontTextFontName() throws
  public func uIButtonReflecting() throws
  public func authorizedAlwaysRepeat() throws
}
@objc public enum ButtonType : Swift.Int {
  case SUBMIT
  case CONTINUE
  case NEXT
  case CANCEL
  case RESEND
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LabelType : Swift.Int {
  case INFO_HEADER
  case INFO_TEXT
  case INFO_LABEL
  case WHITELIST
  case WHY_INFO
  case WHY_INFO_TEXT
  case EXPANDABLE_INFO
  case EXPANDABLE_INFO_TEXT
  case SELECTION_LIST
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Severity : Swift.Int {
  case LOW
  case MEDIUM
  case HIGH
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SecurityEvent : Swift.Int {
  case ROOT
  case TAMPERED
  case INSTALLED_FROM_UNTRUSTED_STORE
  case HOOK
  case EMULATOR
  case DEBUGGING
  case DEBUG_ENABLED
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ChallengeStatusReceiver {
  @objc func completed(_ completionEvent: ipworks3ds_sdk.CompletionEvent)
  @objc func cancelled()
  @objc func timedout()
  @objc func protocolError(_ protocolErrorEvent: ipworks3ds_sdk.ProtocolErrorEvent)
  @objc func runtimeError(_ runtimeErrorEvent: ipworks3ds_sdk.RuntimeErrorEvent)
}
@objc public protocol ClientEventListener {
  @objc func onDataPacketIn(_ dataPacket: Foundation.Data)
  @objc func onDataPacketOut(_ dataPacket: Foundation.Data)
  @objc func onError(_ errorCode: Swift.Int32, _ description: Swift.String)
  @objc func onLog(_ logLevel: Swift.Int32, _ message: Swift.String, _ logType: Swift.String)
  @objc func onSSLServerAuthentication(_ certEncoded: Foundation.Data, _ certSubject: Swift.String, _ certIssuer: Swift.String, _ status: Swift.String, _ accept: Swift.UnsafeMutablePointer<Swift.Int32>)
  @objc func onSSLStatus(_ message: Swift.String)
}
@objc public protocol SecurityEventListener {
  @objc func alarm(_ severity: ipworks3ds_sdk.Severity, _ event: ipworks3ds_sdk.SecurityEvent)
}
@_inheritsConvenienceInitializers @objc public class ProgressView : ObjectiveC.NSObject {
  @objc public func show()
  @objc public func close()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AuthenticationRequestParameters : ObjectiveC.NSObject {
  @objc public func getDeviceData() -> Swift.String
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getSDKAppID() -> Swift.String
  @objc public func getSDKReferenceNumber() -> Swift.String
  @objc public func getSDKEphemeralPublicKey() -> Swift.String
  @objc public func getMessageVersion() -> Swift.String
  @objc public func getAuthRequest() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ChallengeParameters : ObjectiveC.NSObject {
  @objc public init(threeDSServerAuthResponse: Swift.String)
  @objc public init(threeDSServerTransactionID: Swift.String, acsTransactionID: Swift.String, acsRefNumber: Swift.String, acsSignedContent: Swift.String, threeDSRequestorAppURL: Swift.String)
  @objc public func set3DSServerTransactionID(_ transactionID: Swift.String)
  @objc public func setAcsTransactionID(_ transactionID: Swift.String)
  @objc public func setAcsRefNumber(_ refNumber: Swift.String)
  @objc public func setAcsSignedContent(_ signedContent: Swift.String)
  @objc public func get3DSServerTransactionID() -> Swift.String
  @objc public func getAcsTransactionID() -> Swift.String
  @objc public func getAcsRefNumber() -> Swift.String
  @objc public func getAcsSignedContent() -> Swift.String
  @objc public func getThreeDSRequestorAppURL() -> Swift.String
  @objc public func setThreeDSRequestorAppURL(_ threeDSRequestorAppURL: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class ConfigParameters : ObjectiveC.NSObject {
  @objc public func addParam(group: Swift.String?, paramName: Swift.String, paramValue: Swift.String?) throws
  @objc public func getParamValue(group: Swift.String?, paramName: Swift.String) throws -> Swift.String
  @objc public func removeParam(group: Swift.String?, paramName: Swift.String) throws -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc public class DirectoryServerInfo : ObjectiveC.NSObject {
  @objc public init(RID: Swift.String, publicKey: Swift.String, CA: Swift.String)
  @objc public init(RID: Swift.String, publicKey: Swift.String, CAs: [Swift.String])
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ConfigParametersBuilder : ObjectiveC.NSObject {
  public static let GROUP_DIRECTORY_SERVER_KEY: Swift.String
  public static let GROUP_DIRECTORY_SERVER_CA: Swift.String
  public static let GROUP_DEVICE_PARAMETER_BLACK_LIST: Swift.String
  public static let GROUP_CLIENT_CONFIG: Swift.String
  public static let RUNTIME_LICENSE: Swift.String
  public static let APP_PROVISIONING_PROFILE_HASH: Swift.String
  public static let APP_EXECUTABLE_HASH: Swift.String
  public static let APP_BUNDLE_ID: Swift.String
  @objc public init(directoryServerInfoList: [ipworks3ds_sdk.DirectoryServerInfo]?, runtimeLicense: Swift.String, deviceParameterBlacklist: [Swift.String]?, clientConfig: [Swift.String]?, appBundleID: Swift.String)
  @objc public func build() throws -> ipworks3ds_sdk.ConfigParameters
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Customization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setTextFontName(fontName: Swift.String?) throws
  @objc public func setTextColor(hexColorCode: Swift.String?) throws
  @objc public func setTextColor(color: UIKit.UIColor?)
  @objc public func setTextFontSize(fontSize: Swift.Int) throws
  @objc public func getTextFontName() -> Swift.String?
  @objc public func getTextColor() -> UIKit.UIColor?
  @objc public func getTextColorHex() -> Swift.String?
  @objc public func getTextFontSize() -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ButtonCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setBackgroundColor(color: UIKit.UIColor?)
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func setHeight(height: CoreGraphics.CGFloat) throws
  @objc public func getBackgroundColor() -> UIKit.UIColor?
  @objc public func getCornerRadius() -> Swift.Int
  @objc public func getHeight() -> CoreGraphics.CGFloat
  @objc public func setPadding(edge: UIKit.UIEdgeInsets)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ToolbarCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setBackgroundColor(color: UIKit.UIColor?)
  @objc public func setHeaderText(headerText: Swift.String?) throws
  @objc public func setButtonText(buttonText: Swift.String?) throws
  @objc public func getBackgroundColor() -> UIKit.UIColor?
  @objc public func getHeaderText() -> Swift.String?
  @objc public func getButtonText() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class LabelCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setHeadingTextColor(color: UIKit.UIColor?)
  @objc public func setHeadingTextFontName(fontName: Swift.String?) throws
  @objc public func setHeadingTextFontSize(fontSize: Swift.Int) throws
  @objc public func setHeadingTextAlignment(textAlignment: UIKit.NSTextAlignment) throws
  @objc public func setPadding(forLabelType: ipworks3ds_sdk.LabelType, edge: UIKit.UIEdgeInsets) throws
  @objc public func setBackgroundColor(forLabelType: ipworks3ds_sdk.LabelType, color: UIKit.UIColor) throws
  @objc public func setTextColor(forLabelType: ipworks3ds_sdk.LabelType, color: UIKit.UIColor) throws
  @objc public func setTextFontName(forLabelType: ipworks3ds_sdk.LabelType, fontName: Swift.String) throws
  @objc public func setTextFontSize(forLabelType: ipworks3ds_sdk.LabelType, fontSize: CoreGraphics.CGFloat) throws
  @objc public func getHeadingTextColor() -> UIKit.UIColor?
  @objc public func getHeadingTextFontName() -> Swift.String?
  @objc public func getHeadingTextFontSize() -> Swift.Int
  @objc public func getHeadingTextAlignment() -> UIKit.NSTextAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TextBoxCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func getCornerRadius() -> Swift.Int
  @objc public func setBorderWidth(borderWidth: Swift.Int) throws
  @objc public func setBorderColor(color: UIKit.UIColor?)
  @objc public func getBorderWidth() -> Swift.Int
  @objc public func getBorderColor() -> UIKit.UIColor?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class UiCustomization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setButtonCustomization(buttonCustomization: ipworks3ds_sdk.ButtonCustomization, buttonType: ipworks3ds_sdk.ButtonType) throws
  @objc public func setToolbarCustomization(toolbarCustomization: ipworks3ds_sdk.ToolbarCustomization) throws
  @objc public func setLabelCustomization(labelCustomization: ipworks3ds_sdk.LabelCustomization) throws
  @objc public func setTextBoxCustomization(textBoxCustomization: ipworks3ds_sdk.TextBoxCustomization) throws
  @objc public func getButtonCustomization(buttonType: ipworks3ds_sdk.ButtonType) -> ipworks3ds_sdk.ButtonCustomization
  @objc public func getToolbarCustomization() -> ipworks3ds_sdk.ToolbarCustomization
  @objc public func getLabelCustomization() -> ipworks3ds_sdk.LabelCustomization
  @objc public func getTextBoxCustomization() -> ipworks3ds_sdk.TextBoxCustomization
  @objc public func setBackground(color: UIKit.UIColor?)
  @objc public func setInformationZoneIconPosition(_ position: Swift.Int)
  @objc public func setBrandingZoneLogoGap(_ value: CoreGraphics.CGFloat)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Warning : ObjectiveC.NSObject {
  @objc public func getID() -> Swift.String
  @objc public func getMessage() -> Swift.String
  @objc public func getSeverity() -> ipworks3ds_sdk.Severity
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RuntimeErrorEvent : ObjectiveC.NSObject {
  @objc public func getErrorCode() -> Swift.String?
  @objc public func getErrorMessage() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ErrorMessage : ObjectiveC.NSObject {
  @objc public func getTransactionID() -> Swift.String
  @objc public func getErrorCode() -> Swift.String
  @objc public func getErrorDescription() -> Swift.String
  @objc public func getErrorDetails() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ProtocolErrorEvent : ObjectiveC.NSObject {
  @objc public func getErrorMessage() -> ipworks3ds_sdk.ErrorMessage
  @objc public func getSDKTransactionID() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CompletionEvent : ObjectiveC.NSObject {
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getTransactionStatus() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public enum IPWorks3DSSDKError : Swift.Error {
  case SDKAlreadInitializedException
  case SDKNotInitializedException(_: Swift.String)
  case SDKRuntimeException(_: Swift.String)
  case InvalidInputException(_: Swift.String)
}
extension IPWorks3DSSDKError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var myUILabelEnvironment: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ThreeDS2Service : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(bundle: Foundation.Bundle)
  @objc public func initialize(configParameters: ipworks3ds_sdk.ConfigParameters?, locale: Swift.String?, uiCustomization: ipworks3ds_sdk.UiCustomization?, clientEventListener: ipworks3ds_sdk.ClientEventListener?, securityEventListener: ipworks3ds_sdk.SecurityEventListener?) throws
  @objc public func createTransaction(_ directoryServerID: Swift.String, _ messageVersion: Swift.String?) throws -> ipworks3ds_sdk.Transaction
  @objc public func cleanup() throws
  @objc public func getSDKVersion() throws -> Swift.String
  @objc public func getWarnings() throws -> Swift.Array<ipworks3ds_sdk.Warning>
  @objc deinit
}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.Equatable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.Hashable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ButtonType : Swift.Equatable {}
extension ipworks3ds_sdk.ButtonType : Swift.Hashable {}
extension ipworks3ds_sdk.ButtonType : Swift.RawRepresentable {}
extension ipworks3ds_sdk.LabelType : Swift.Equatable {}
extension ipworks3ds_sdk.LabelType : Swift.Hashable {}
extension ipworks3ds_sdk.LabelType : Swift.RawRepresentable {}
extension ipworks3ds_sdk.Severity : Swift.Equatable {}
extension ipworks3ds_sdk.Severity : Swift.Hashable {}
extension ipworks3ds_sdk.Severity : Swift.RawRepresentable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.Equatable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.Hashable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.RawRepresentable {}
