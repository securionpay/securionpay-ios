// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SecurionPay
import CryptoKit
import Foundation
import Swift
import UIKit
import _Concurrency
import ipworks3ds_sdk
@objc(SPCustomer) public class Customer : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc(SPPaymentResult) public class PaymentResult : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let customer: Customer?
  @objc final public let chargeId: Swift.String?
  @objc final public let subscriptionId: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(SPError) final public class SecurionPayError : ObjectiveC.NSObject, Swift.Codable {
  public enum ErrorType : Swift.String, Swift.Codable {
    case invalidRequest
    case cardError
    case gatewayError
    case invalidVerificationCode
    case unknown
    case sdk
    case threeDSecure
    public init(from decoder: Swift.Decoder) throws
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ErrorCode : Swift.String, Swift.Codable {
    case invalidNumber
    case invalidExpiryMonth
    case invalidExpiryYear
    case invalidCVC
    case incorrectCVC
    case incorrectZip
    case expiredCard
    case insufficientFunds
    case lostOrStolen
    case suspectedFraud
    case cardDeclined
    case processingError
    case blacklisted
    case expiredToken
    case limitExcedeed
    case invalidVerificationCode
    case verificationCodeRequired
    case enrolledCardIsRequired
    case successfulLiabilityShiftIsRequired
    case authenticationRequired
    case invalidEmail
    case unsupportedValue
    case incorrectCheckoutRequest
    case deviceJailbroken
    case integrityTampered
    case simulator
    case osNotSupported
    case anotherOperation
    case unknown
    public init(from decoder: Swift.Decoder) throws
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc final public func localizedMessage() -> Swift.String
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc(SPCardExpiration) public class CardExpiration : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let month: Swift.String
  @objc final public let year: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc(SPCard) public class Card : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let last2: Swift.String?
  @objc final public let last4: Swift.String?
  @objc final public let brand: Swift.String
  @objc final public let expiration: CardExpiration?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SecurionPay) final public class SecurionPay : ObjectiveC.NSObject {
  @objc public static let shared: SecurionPay
  @objc final public var publicKey: Swift.String?
  @objc final public var bundleIdentifier: Swift.String?
  @objc final public func showCheckoutViewController(in viewController: UIKit.UIViewController, checkoutRequest: CheckoutRequest, completion: @escaping (PaymentResult?, SecurionPayError?) -> Swift.Void)
  @objc final public func cleanSavedCards()
  @objc final public func createToken(with request: TokenRequest, completion: @escaping (Token?, SecurionPayError?) -> Swift.Void)
  @objc final public func authenticate(token: Token, amount: Swift.Int, currency: Swift.String, navigationControllerFor3DS: UIKit.UINavigationController, completion: @escaping (Token?, SecurionPayError?) -> Swift.Void)
  @objc final public func authenticate(token: Token, amount: Swift.Int, currency: Swift.String, viewControllerPresenting3DS: UIKit.UIViewController, completion: @escaping (Token?, SecurionPayError?) -> Swift.Void)
  @objc deinit
}
@objc(SPLiabilityShift) public enum LiabilityShift : Swift.Int {
  case failed
  case notPossible
  case successful
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SPThreeDSecureInfo) public class ThreeDSecureInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let amount: Swift.Int
  @objc final public let currency: Swift.String
  @objc final public let enrolled: Swift.Bool
  @objc final public let version: Swift.String
  @objc public var liabilityShift: LiabilityShift {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc(SPCheckoutRequest) public class CheckoutRequest : ObjectiveC.NSObject {
  @objc public init(content: Swift.String)
  @objc deinit
}
@objc(SPToken) public class Token : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  final public let created: Swift.Int?
  @objc final public let objectType: Swift.String?
  @objc final public let first6: Swift.String?
  @objc final public let last4: Swift.String?
  @objc final public let fingerprint: Swift.String?
  @objc final public let expirationMonth: Swift.String?
  @objc final public let expirationYear: Swift.String?
  @objc final public let cardholder: Swift.String?
  @objc final public let brand: Swift.String
  @objc final public let type: Swift.String?
  @objc final public let country: Swift.String?
  final public let used: Swift.Bool?
  @objc final public let threeDSecureInfo: ThreeDSecureInfo?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(SPSecurionPayStyle) public class SecurionPayStyle : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc(SPButtonStyle) public class Button : ObjectiveC.NSObject {
    @objc public static var defaultPrimary: SecurionPayStyle.Button {
      @objc get
    }
    @objc public static var defaultSecondary: SecurionPayStyle.Button {
      @objc get
    }
    @objc public var height: CoreGraphics.CGFloat
    @objc public var color: UIKit.UIColor
    @objc public var cornerRadius: CoreGraphics.CGFloat
    @objc public var textColor: UIKit.UIColor
    @objc public var font: UIKit.UIFont
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPToolbarButtonStyle) public class ToolbarButton : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.ToolbarButton {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var fontName: Swift.String
    @objc public var fontSize: CoreGraphics.CGFloat
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPTitleLabelStyle) public class TitleLabel : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.TitleLabel {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var fontName: Swift.String
    @objc public var fontSize: CoreGraphics.CGFloat
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPHeading1LabelStyle) public class Heading1Label : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.Heading1Label {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var fontName: Swift.String
    @objc public var fontSize: CoreGraphics.CGFloat
    @objc public var textAlignment: UIKit.NSTextAlignment
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPHeading2LabelStyle) public class Heading2Label : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.Heading2Label {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var fontName: Swift.String
    @objc public var fontSize: CoreGraphics.CGFloat
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPErrorLabelStyle) public class ErrorLabel : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.ErrorLabel {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var font: UIKit.UIFont
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPBody1LabelStyle) public class Body1Label : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.Body1Label {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var fontName: Swift.String
    @objc public var fontSize: CoreGraphics.CGFloat
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPBody2LabelStyle) public class Body2Label : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.Body2Label {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var fontName: Swift.String
    @objc public var fontSize: CoreGraphics.CGFloat
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(SPInputStyle) public class Input : ObjectiveC.NSObject {
    @objc public static var `default`: SecurionPayStyle.Input {
      @objc get
    }
    @objc public var textColor: UIKit.UIColor
    @objc public var placeholderColor: UIKit.UIColor
    @objc public var fontName: Swift.String
    @objc public var fontSize: CoreGraphics.CGFloat
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public static var `default`: SecurionPayStyle {
    @objc get
  }
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var titleLabel: SecurionPayStyle.TitleLabel
  @objc public var toolbarCancelButton: SecurionPayStyle.ToolbarButton
  @objc public var primaryButton: SecurionPayStyle.Button
  @objc public var secondaryButton: SecurionPayStyle.Button
  @objc public var heading1Label: SecurionPayStyle.Heading1Label
  @objc public var heading2Label: SecurionPayStyle.Heading2Label
  @objc public var errorLabel: SecurionPayStyle.ErrorLabel
  @objc public var body1Label: SecurionPayStyle.Body1Label
  @objc public var body2Label: SecurionPayStyle.Body2Label
  @objc public var input: SecurionPayStyle.Input
  @objc override dynamic public init()
  @objc deinit
}
@objc(SPTokenRequest) public class TokenRequest : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(number: Swift.String, expirationMonth: Swift.String, expirationYear: Swift.String, cvc: Swift.String, cardholder: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension SecurionPayError.ErrorType : Swift.Equatable {}
extension SecurionPayError.ErrorType : Swift.Hashable {}
extension SecurionPayError.ErrorType : Swift.RawRepresentable {}
extension SecurionPayError.ErrorCode : Swift.Equatable {}
extension SecurionPayError.ErrorCode : Swift.Hashable {}
extension SecurionPayError.ErrorCode : Swift.RawRepresentable {}
extension LiabilityShift : Swift.Equatable {}
extension LiabilityShift : Swift.Hashable {}
extension LiabilityShift : Swift.RawRepresentable {}
